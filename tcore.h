

#ifndef TCORE_H
#define TCORE_H


#include "tracklist.h"
#include "maddr.h"
#include "tlmblock.h"

#define _TRACK_FLAG_EMPTY ( 0x100 )



/* структура, которая будет статической  будет скрыта */
typedef struct {

    addr_t mem_start_addr;          /* адрес с которого выделена память */
    addr_t mem_end_addr;            /* адрес на котором заканчивается участок памяти */


    addr_t mem_cur_addr;            /* адрес на который в данный момент указывает ptr_cur */


    void *ptr_cur;                  /* указатель, который содержит адрес mem_cur_addr */


    /*
     * указатель будет хранить последнее корректное,
     * проверенное значение поля ptr_cur на случай, если произойдет ошибка
     * и пользователю не удастся самому вернуть, к корректному адресу
     */
    void *save_ptr;

    size_t msize;


    /*
     * указатель на список, содержащий указатели на структуры track_ptr_t,
     * которые управляют разными участками памяти (ссылаются на эти участки)
     * одного единого блока памяти, выделеного функциями *alloc
     */
    //dht_list_t *links_shared_mem_block_list;
    
    lmblock_t *links_shared_mem_block;
    
    /*
     * указатель на структуру, доступную пользователю
     * которая соответствует текущей структуре struct_core_track_ptr_t
     * требуется, для изменения поля last_error этой структуры
     * и, возможно, не только
     */
    track_ptr_t *user_track_data;


    /*
     * контрольная сумма, расчитаная по выделенной памяти
     * используется, если установлен флаг TRACK_ADDR_PROTECT
     * или TRACK_ADDR_CHECK_SUM
     */
    unsigned int checksum;


    /*
     * поле flags отвечает за текущий статус выделеной памяти ()
     *  
     * первые 8 бит отведены под структуру пользователя,
     *      остальные биты зарезервированы
     * 
     * если flags содержит TRACK_ADDR_PROTECT, то в случае,
     *  если память будет изменена в каком либо участке программы
     *  любая функция библиотеки завершится с ошибкой
     *
     * если flags содержит TRACK_ADDR_CHECK_SUM,
     *  то контрольная сумма check_sum будет пересчитываться при каждом вызове фукнции,
     *  которая предусматривает изменение данных в этой области памяти
     */
    int flags;



} struct_core_track_ptr_t;






#endif /* TCORE_H */
